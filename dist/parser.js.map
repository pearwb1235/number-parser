{"version":3,"sources":["../src/parser.ts"],"names":["ParserConfig","config","loadConfig","allowChar","concat","Object","keys","number","unit","dot","numberRegStr","join","replace","unitRegStr","dotRegStr","RegExp","dotRegexp","regexp","negativeRegexp","str","dotFlag","i","length","includes","NumberParserError","Parser","vaild","input","test","substr","parseNumber","parseUnit","toString","newStr","s","sub","endsWith","result","Number"],"mappings":"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","sourcesContent":["import { Config } from \"./config\";\nimport NumberParserError from \"./error\";\n\nexport class ParserConfig {\n  private config: Config;\n  private allowChar: string[];\n  numberRegStr: Readonly<RegExp>;\n  unitRegStr: Readonly<RegExp>;\n  dotRegexp: Readonly<RegExp>;\n  regexp: Readonly<RegExp>;\n  negativeRegexp: Readonly<RegExp>;\n  constructor(config: Config) {\n    this.loadConfig(config);\n  }\n  loadConfig(config: Config): this {\n    this.config = config;\n    this.allowChar = []\n      .concat(Object.keys(this.config.number))\n      .concat(Object.keys(this.config.unit))\n      .concat(this.config.dot);\n    const numberRegStr = Object.keys(this.config.number)\n      .join(\"\")\n      .replace(/(\\.)/, \"\\\\$1\");\n    const unitRegStr = Object.keys(this.config.unit)\n      .join(\"\")\n      .replace(/(\\.)/, \"\\\\$1\");\n    const dotRegStr = this.config.dot.join(\"\").replace(/(\\.)/, \"\\\\$1\");\n    this.numberRegStr = new RegExp(`[${numberRegStr}]`);\n    this.unitRegStr = new RegExp(`[${unitRegStr}]`);\n    this.dotRegexp = new RegExp(`[${dotRegStr}]`);\n    this.regexp = new RegExp(`[${numberRegStr + unitRegStr + dotRegStr}]`);\n    this.negativeRegexp = new RegExp(\n      `[^${numberRegStr + unitRegStr + dotRegStr}]`\n    );\n    return this;\n  }\n  vaild(str: string): void {\n    let dotFlag = false;\n    for (let i = 0; i < str.length; i++) {\n      if (this.config.dot.includes(str[i])) {\n        if (dotFlag) throw new NumberParserError(2, \"小數點出現兩個(含)以上\");\n        dotFlag = true;\n      } else if (!this.allowChar.includes(str[i]))\n        throw new NumberParserError(\n          1,\n          \"字串出現非允許字串: \" + str[i] + \"(index:\" + i + \")\"\n        );\n    }\n  }\n  parseNumber(str: string): number {\n    if (str in this.config.number) return this.config.number[str];\n    throw new NumberParserError(9, \"無法轉換字元 \" + str + \" 為數字\");\n  }\n  parseUnit(str: string): number {\n    if (str in this.config.unit) return this.config.unit[str];\n    throw new NumberParserError(9, \"無法轉換字元 \" + str + \" 為數字\");\n  }\n}\n\nexport class Parser {\n  private config: ParserConfig;\n  constructor(config: Config | ParserConfig) {\n    this.config =\n      config instanceof ParserConfig ? config : new ParserConfig(config);\n  }\n  parse(str: string): number {\n    this.config.vaild(str);\n    let input = str;\n    if (this.config.dotRegexp.test(input)) {\n      if (this.config.unitRegStr.test(input.substr(-1))) {\n        // 1.2萬\n        return (\n          this.parseNumber(input.substr(0, input.length - 1)) *\n          this.config.parseUnit(input.substr(-1))\n        );\n      } else {\n        // 1.2\n        return this.parseNumber(input);\n      }\n    } else {\n      if (\n        this.config.unitRegStr.test(input.substr(0, 1)) &&\n        this.config.unitRegStr.test(input.substr(1, 1))\n      ) {\n        // 十萬 => 10萬\n        input =\n          this.config.parseUnit(input.substr(0, 1)).toString() +\n          input.substr(1);\n      }\n      if (\n        this.config.unitRegStr.test(input.substr(-2, 1)) &&\n        this.config.numberRegStr.test(input.substr(-1))\n      ) {\n        // 一【千二】\n        const unit = this.config.parseUnit(input.substr(-2, 1));\n        return (\n          this.parseNumber(input.substr(0, input.length - 2)) * unit +\n          (this.parseNumber(input.substr(-1)) * unit) / 10\n        );\n      } else {\n        // 四千三百二十一\n        return this.parseNumber(input);\n      }\n    }\n    return 0;\n  }\n  parseNumber(str: string): number {\n    let newStr = \"\";\n    for (let i = 0; i < str.length; i++) {\n      const s = str[i];\n      if (this.config.dotRegexp.test(s)) {\n        newStr += \".\";\n      } else if (this.config.unitRegStr.test(s)) {\n        if (i + 1 >= str.length || this.config.unitRegStr.test(str[i + 1]))\n          newStr += this.config.parseUnit(s).toString().substr(1);\n        else if (\n          this.config.parseNumber(str[i + 1]) === 0 &&\n          ![\"0\", \"０\"].includes(str[i + 1])\n        ) {\n          newStr += this.config.parseUnit(s).toString().substr(1);\n          const sub = this.parseNumber(str.substr(i + 2)).toString();\n          newStr = newStr.substr(0, newStr.length - sub.length) + sub;\n          break;\n        }\n      } else {\n        newStr += this.config.parseNumber(s).toString();\n      }\n    }\n    if (this.config.dotRegexp.test(newStr)) {\n      while (newStr.endsWith(\"0\")) {\n        newStr = newStr.substr(0, newStr.length - 1);\n      }\n      if (newStr.endsWith(\".\")) newStr = newStr.substr(0, newStr.length - 1);\n    }\n    const result = Number(newStr);\n    if (result.toString() !== newStr)\n      throw new NumberParserError(999, \"確認數字轉換結果失敗\");\n    return result;\n  }\n}\n"],"file":"parser.js"}